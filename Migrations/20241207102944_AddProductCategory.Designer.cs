// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Areas.Identity.Data;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241207102944_AddProductCategory")]
    partial class AddProductCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BUYING_DATE");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOTE");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PHONE");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("TOTAL");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("USERID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BILL", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.BillItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("IdBill")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID_BILL");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PRICE");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL_IMAGE");

                    b.HasKey("Id");

                    b.HasIndex("IdBill");

                    b.ToTable("BILL_ITEM", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("Conten")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONTEN");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("DATE");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.ToTable("BLOG", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("USERID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CART", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.CartDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("IDProduct");

                    b.Property<string>("Idcart")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("IDCART");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PRICE");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("Idcart");

                    b.ToTable("CART_DETAIL", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("IdProduct")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("IDProduct");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("IS_MAIN");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL_IMAGE");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.ToTable("IMAGE", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CATEGORY");

                    b.Property<string>("IdCategory")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("IdCategory");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAMEPRODUCT");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PRICE");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REVIEW");

                    b.Property<int?>("Sales")
                        .HasColumnType("int")
                        .HasColumnName("SALES");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAMEPRODUCT");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Provider", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("PROVIDER", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Receive", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE");

                    b.Property<string>("Provider")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PROVIDER");

                    b.HasKey("Id");

                    b.HasIndex("Provider");

                    b.ToTable("RECEIVE", (string)null);
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.RecevieDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("IdProduct")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID_PRODUCT");

                    b.Property<string>("IdReceive")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID_RECEIVE");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("PRICE");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdReceive");

                    b.ToTable("RECEVIE_DETAIL", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Bill", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BILL_APPLICATION_USER");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.BillItem", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.Bill", "IdBillNavigation")
                        .WithMany("BillItems")
                        .HasForeignKey("IdBill")
                        .HasConstraintName("FK_BILL_ITEM_BILL");

                    b.Navigation("IdBillNavigation");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Cart", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CART_APPLICATION_USER");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.CartDetail", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.Product", "IdProductNavigation")
                        .WithMany("CartDetails")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_CART_DETAIL_Product");

                    b.HasOne("Project.Areas.Identity.Data.Cart", "IdcartNavigation")
                        .WithMany("CartDetails")
                        .HasForeignKey("Idcart")
                        .IsRequired()
                        .HasConstraintName("FK_CART_DETAIL_CART");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdcartNavigation");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Image", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.Product", "IdProductNavigation")
                        .WithMany("Images")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_IMAGE_Product");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Product", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Receive", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.Provider", "ProviderNavigation")
                        .WithMany("Receives")
                        .HasForeignKey("Provider")
                        .HasConstraintName("FK_RECEIVE_PROVIDER");

                    b.Navigation("ProviderNavigation");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.RecevieDetail", b =>
                {
                    b.HasOne("Project.Areas.Identity.Data.Product", "IdProductNavigation")
                        .WithMany("RecevieDetails")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_RECEVIE_DETAIL_Product");

                    b.HasOne("Project.Areas.Identity.Data.Receive", "IdReceiveNavigation")
                        .WithMany("RecevieDetails")
                        .HasForeignKey("IdReceive")
                        .HasConstraintName("FK_RECEVIE_DETAIL_RECEIVE");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdReceiveNavigation");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Bill", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Images");

                    b.Navigation("RecevieDetails");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Provider", b =>
                {
                    b.Navigation("Receives");
                });

            modelBuilder.Entity("Project.Areas.Identity.Data.Receive", b =>
                {
                    b.Navigation("RecevieDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
